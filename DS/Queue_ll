#include <stdio.h>
#include <stdlib.h>

struct node 
{
    int data;
    int pri;
    struct node* next;
};

struct queue 
{
    struct node *front, *rear;
};
 
struct node* newnode(int val)
{
    struct node* temp = (struct node*)malloc(sizeof(struct node));
    int priority;
    temp->data = val;
    temp->pri = priority;
    temp->next = NULL;
    return temp;
}
 
struct queue* create()
{
    struct queue* q = (struct queue*)malloc(sizeof(struct queue));
    q->front = q->rear = NULL;
    return q;
}
 
void enqueue(struct queue* q, int val,int priority)
{

    struct node* temp = newnode(val);
    struct node *ptr=h
    if (q->front == NULL) 
    {
        q->front = q->rear = temp;
        return;
    }
    
    q->rear->next = temp;
    q->rear = temp;
    
    
}
 
// Function to remove a key from given queue q
void dequeue(struct queue* q)
{
    if (q->front == NULL)
    {
        printf("No elements in queue");
    }
    
    struct node* temp = q->front;
    printf("The element %d is deleted",q->front->data);
    q->front = q->front->next;
    
    if (q->front == NULL)
    {
        q->rear = NULL;
    }
    free(temp);
}

int main()
{
    struct queue* q = create();
    struct node* temp = (struct node*)malloc(sizeof(struct node));
    int choice,val,priority;
    int i=0;
    while(i==0)
    {
        printf("\n\n1) Enqueue\n2) Dequeue\n3) Display\n4) Exit\n\n");
        scanf("%d",&choice);
        
        switch(choice)
        {
            case 1:
                printf("\nEnter value to enqueue: ");
                scanf("%d",&val);
                printf("\nEnter priority: ");
                scanf("%d",&priority);
                enqueue(q,val,priority);
                break;
            case 2:
                dequeue(q);
                break;
            case 3:
                temp = q->front;
                if(q->front==NULL)
                {
                    printf("No elements in this queue");
                }
                else
                {
                    while(temp !=NULL)
                    {
                        printf("%d\n", temp -> data );
                        temp=temp->next;
                    }
                }
                //printf("\nQueue Front : %d \n", q->front->data);
                //printf("Queue Rear : %d \n", q->rear->data);
                break;
            case 4:
                i=1;
                break;
        }
    }
    return 0;
}
